#generated by the Ahaggar framework

<function_decl> set_reset_devices(char * str) [init/main.c:149]
  <modify_expr> (<var_decl> reset_devices = <integer_cst> 1u) [init/main.c:151]
  <return_expr> (<integer_cst> 1) [init/main.c:152]

<function_decl> obsolete_checksetup(char * line) [init/main.c:163]
  <decl_expr> const struct obs_kernel_param* <var_decl> p
  <decl_expr> int  <var_decl> had_early_param = <integer_cst> 0
  <modify_expr> (<var_decl> p = <addr_expr> <var_decl> &__setup_start) [init/main.c:168]
  <label_expr> <label_decl> <D.45226> [init/main.c:190]
  <call_expr> strlen(<component_ref> <var_decl> p->str) [init/main.c:170]<integer_cst> 32u<integer_cst> 4u
  <decl_expr> int  <var_decl> n = 
    <call_expr> strlen(<component_ref> <var_decl> p->str) [init/main.c:170]
  <cond_expr> (
    if (
    <call_expr> parameqn(<parm_decl> line, <component_ref> <var_decl> p->str, <var_decl> n))
    {
      <cond_expr> (
        if (
        <ne_expr> (<component_ref> <var_decl> p->early != <integer_cst> 0))
        {
          <cond_expr> (
            if (
            <truth_or_expr> (
              <eq_expr> (
                <indirect_ref> ((
                  <pointer_plus_expr> (<parm_decl> *line + <var_decl> n))) == <integer_cst> 0) || 
              <eq_expr> (
                <indirect_ref> ((
                  <pointer_plus_expr> (<parm_decl> *line + <var_decl> n))) == <integer_cst> 61)))
            {
              <modify_expr> (<var_decl> had_early_param = <integer_cst> 1) [init/main.c:178]
            }
          ) [init/main.c:177]
        }
        else {
          <cond_expr> (
            if (
            <eq_expr> (<component_ref> <var_decl> p->setup_func == <pointer_type> <integer_cst> 0))
            {
              <call_expr> printk(<addr_expr> <string_cst> "\14Paramete...", <component_ref> <var_decl> p->str) [init/main.c:180]
              <return_expr> (<integer_cst> 1) [init/main.c:182]
            }
            else {
              <cond_expr> (
                if (
                <ne_expr> (
                  <component_ref> <var_decl> p->setup_func(
                    <pointer_plus_expr> (<parm_decl> line + <var_decl> n)) != <integer_cst> 0))
                {
                  <return_expr> (<integer_cst> 1) [init/main.c:184]
                }
              ) [init/main.c:183]
            }
          ) [init/main.c:179]
        }
      ) [init/main.c:172]
    }
  ) [init/main.c:171]
  <postincrement_expr> (<var_decl> p++ )
  <cond_expr> (
    if (
    <lt_expr> (<var_decl> p < <addr_expr> <var_decl> &__setup_end))
      <goto_expr> goto <label_decl> <D.45226> [init/main.c:190]
    else 
      <goto_expr> goto <label_decl> <D.45227> [init/main.c:190]
  ) [init/main.c:187]
  <label_expr> <label_decl> <D.45227> [init/main.c:190]
  <return_expr> (<var_decl> had_early_param) [init/main.c:189]

<function_decl> debug_kernel(char * str) [init/main.c:200]
  <modify_expr> (<array_ref> <var_decl> console_printk[<integer_cst> 0] = <integer_cst> 10) [init/main.c:202]
  <return_expr> (<integer_cst> 0) [init/main.c:203]

<function_decl> quiet_kernel(char * str) [init/main.c:206]
  <modify_expr> (<array_ref> <var_decl> console_printk[<integer_cst> 0] = <integer_cst> 4) [init/main.c:208]
  <return_expr> (<integer_cst> 0) [init/main.c:209]

<function_decl> loglevel(char * str) [init/main.c:215]
  <decl_expr> int  <var_decl> newlevel
  <cond_expr> (
    if (
    <ne_expr> (
      <call_expr> get_option(<addr_expr> <parm_decl> &str, <addr_expr> <var_decl> &newlevel) != <integer_cst> 0))
    {
      <modify_expr> (<array_ref> <var_decl> console_printk[<integer_cst> 0] = <var_decl> newlevel) [init/main.c:225]
      <return_expr> (<integer_cst> 0) [init/main.c:226]
    }
  ) [init/main.c:224]
  <return_expr> (<integer_cst> -22) [init/main.c:229]

<function_decl> repair_env_string(char * param, char * val, const char * unused) [init/main.c:235]
  <cond_expr> (
    if (
    <ne_expr> (<parm_decl> val != <pointer_type> <integer_cst> 0))
    {
      <cond_expr> (
        if (
        <eq_expr> (<parm_decl> val == 
          <pointer_plus_expr> (<parm_decl> param + (
            <plus_expr> (
              <call_expr> strlen(<parm_decl> param) + <integer_cst> 1u)))))
        {
          <modify_expr> (
            <indirect_ref> ((
              <pointer_plus_expr> (<parm_decl> *val + <integer_cst> 18446744073709551615u))) = <integer_cst> 61) [init/main.c:240]
        }
        else {
          <cond_expr> (
            if (
            <eq_expr> (<parm_decl> val == 
              <pointer_plus_expr> (<parm_decl> param + (
                <plus_expr> (
                  <call_expr> strlen(<parm_decl> param) + <integer_cst> 2u)))))
            {
              <modify_expr> (
                <indirect_ref> ((
                  <pointer_plus_expr> (<parm_decl> *val + <integer_cst> 18446744073709551614u))) = <integer_cst> 61) [init/main.c:242]
              <call_expr> memmove(
                <pointer_plus_expr> (<parm_decl> val + <integer_cst> 18446744073709551615u), <parm_decl> val, 
                <plus_expr> (
                  <call_expr> strlen(<parm_decl> val) + <integer_cst> 1u)) [init/main.c:243]
              <postdecrement_expr> (<parm_decl> val-- )
            }
            else {<string_cst> "1:\tud2\n.pu..."<addr_expr> <string_cst> "init/main...."<integer_cst> 246<integer_cst> 12ul
              <call_expr> __builtin_unreachable() [init/main.c:246]
            }
          ) [init/main.c:241]
        }
      ) [init/main.c:239]
    }
  ) [init/main.c:237]
  <return_expr> (<integer_cst> 0) [init/main.c:248]

<function_decl> unknown_bootoption(char * param, char * val, const char * unused) [init/main.c:255]
  <call_expr> repair_env_string(<parm_decl> param, <parm_decl> val, <parm_decl> unused) [init/main.c:257]
  <cond_expr> (
    if (
    <ne_expr> (
      <call_expr> obsolete_checksetup(<parm_decl> param) != <integer_cst> 0))
    {
      <return_expr> (<integer_cst> 0) [init/main.c:261]
    }
  ) [init/main.c:260]
  <cond_expr> (
    if (
    <truth_andif_expr> (
      <ne_expr> (
        <call_expr> strchr(<parm_decl> param, <integer_cst> 46) != <pointer_type> <integer_cst> 0) && (
      <truth_orif_expr> (
        <eq_expr> (<parm_decl> val == <pointer_type> <integer_cst> 0) || 
        <lt_expr> (
          <call_expr> strchr(<parm_decl> param, <integer_cst> 46) < <parm_decl> val)))))
    {
      <return_expr> (<integer_cst> 0) [init/main.c:265]
    }
  ) [init/main.c:264]
  <cond_expr> (
    if (
    <ne_expr> (<var_decl> panic_later != <pointer_type> <integer_cst> 0))
    {
      <return_expr> (<integer_cst> 0) [init/main.c:268]
    }
  ) [init/main.c:267]
  <cond_expr> (
    if (
    <ne_expr> (<parm_decl> val != <pointer_type> <integer_cst> 0))
    {<integer_cst> 32u<integer_cst> 4u
      <decl_expr> unsigned int  <var_decl> i
      <modify_expr> (<var_decl> i = <integer_cst> 0u) [init/main.c:273]
      <goto_expr> goto <label_decl> <D.45263> [init/main.c:273]
      <label_expr> <label_decl> <D.45262> [init/main.c:294]
      <cond_expr> (
        if (
        <eq_expr> (<var_decl> i == <integer_cst> 32u))
        {
          <modify_expr> (<var_decl> panic_later = <addr_expr> <string_cst> "Too many b...") [init/main.c:275]
          <modify_expr> (<var_decl> panic_param = <parm_decl> param) [init/main.c:276]
        }
      ) [init/main.c:274]
      <cond_expr> (
        if (
        <eq_expr> (
          <call_expr> strncmp(<parm_decl> param, <array_ref> <var_decl> envp_init[<var_decl> i], 
            <minus_expr> (<parm_decl> val - <parm_decl> param)) == <integer_cst> 0))
        {
          <goto_expr> goto <label_decl> <D.45261> [init/main.c:279]
        }
      ) [init/main.c:278]
      <postincrement_expr> (<var_decl> i++ )
      <label_expr> <label_decl> <D.45263> [init/main.c:294]
      <cond_expr> (
        if (
        <ne_expr> (<array_ref> <var_decl> envp_init[<var_decl> i] != <pointer_type> <integer_cst> 0))
          <goto_expr> goto <label_decl> <D.45262> [init/main.c:294]
        else 
          <goto_expr> goto <label_decl> <D.45261> [init/main.c:294]
      ) [init/main.c:273]
      <label_expr> <label_decl> <D.45261> [init/main.c:294]
      <modify_expr> (<array_ref> <var_decl> envp_init[<var_decl> i] = <parm_decl> param) [init/main.c:281]
    }
    else {<integer_cst> 32u<integer_cst> 4u
      <decl_expr> unsigned int  <var_decl> i
      <modify_expr> (<var_decl> i = <integer_cst> 0u) [init/main.c:285]
      <goto_expr> goto <label_decl> <D.45266> [init/main.c:285]
      <label_expr> <label_decl> <D.45265> [init/main.c:294]
      <cond_expr> (
        if (
        <eq_expr> (<var_decl> i == <integer_cst> 32u))
        {
          <modify_expr> (<var_decl> panic_later = <addr_expr> <string_cst> "Too many b...") [init/main.c:287]
          <modify_expr> (<var_decl> panic_param = <parm_decl> param) [init/main.c:288]
        }
      ) [init/main.c:286]
      <postincrement_expr> (<var_decl> i++ )
      <label_expr> <label_decl> <D.45266> [init/main.c:294]
      <cond_expr> (
        if (
        <ne_expr> (<array_ref> <var_decl> argv_init[<var_decl> i] != <pointer_type> <integer_cst> 0))
          <goto_expr> goto <label_decl> <D.45265> [init/main.c:294]
        else 
          <goto_expr> goto <label_decl> <D.45267> [init/main.c:294]
      ) [init/main.c:285]
      <label_expr> <label_decl> <D.45267> [init/main.c:294]
      <modify_expr> (<array_ref> <var_decl> argv_init[<var_decl> i] = <parm_decl> param) [init/main.c:291]
    }
  ) [init/main.c:270]
  <return_expr> (<integer_cst> 0) [init/main.c:293]

<function_decl> init_setup(char * str) [init/main.c:296]
  <decl_expr> unsigned int  <var_decl> i
  <modify_expr> (<var_decl> execute_command = <parm_decl> str) [init/main.c:300]
  <modify_expr> (<var_decl> i = <integer_cst> 1u) [init/main.c:307]
  <goto_expr> goto <label_decl> <D.45273> [init/main.c:307]
  <label_expr> <label_decl> <D.45272> [init/main.c:310]
  <modify_expr> (<array_ref> <var_decl> argv_init[<var_decl> i] = <pointer_type> <integer_cst> 0) [init/main.c:308]
  <postincrement_expr> (<var_decl> i++ )
  <label_expr> <label_decl> <D.45273> [init/main.c:310]
  <cond_expr> (
    if (
    <le_expr> (<var_decl> i <= <integer_cst> 31u))
      <goto_expr> goto <label_decl> <D.45272> [init/main.c:310]
    else 
      <goto_expr> goto <label_decl> <D.45274> [init/main.c:310]
  ) [init/main.c:307]
  <label_expr> <label_decl> <D.45274> [init/main.c:310]
  <return_expr> (<integer_cst> 1) [init/main.c:309]

<function_decl> rdinit_setup(char * str) [init/main.c:313]
  <decl_expr> unsigned int  <var_decl> i
  <modify_expr> (<var_decl> ramdisk_execute_command = <parm_decl> str) [init/main.c:317]
  <modify_expr> (<var_decl> i = <integer_cst> 1u) [init/main.c:319]
  <goto_expr> goto <label_decl> <D.45282> [init/main.c:319]
  <label_expr> <label_decl> <D.45281> [init/main.c:322]
  <modify_expr> (<array_ref> <var_decl> argv_init[<var_decl> i] = <pointer_type> <integer_cst> 0) [init/main.c:320]
  <postincrement_expr> (<var_decl> i++ )
  <label_expr> <label_decl> <D.45282> [init/main.c:322]
  <cond_expr> (
    if (
    <le_expr> (<var_decl> i <= <integer_cst> 31u))
      <goto_expr> goto <label_decl> <D.45281> [init/main.c:322]
    else 
      <goto_expr> goto <label_decl> <D.45283> [init/main.c:322]
  ) [init/main.c:319]
  <label_expr> <label_decl> <D.45283> [init/main.c:322]
  <return_expr> (<integer_cst> 1) [init/main.c:321]

<function_decl> setup_command_line(char * command_line) [init/main.c:346]
  <modify_expr> (<var_decl> saved_command_line = 
    <call_expr> __alloc_bootmem(
      <plus_expr> (
        <call_expr> strlen(<addr_expr> <var_decl> &boot_command_line) + <integer_cst> 1u), <integer_cst> 64ul, <integer_cst> 0ul)) [init/main.c:348]
  <modify_expr> (<var_decl> static_command_line = 
    <call_expr> __alloc_bootmem(
      <plus_expr> (
        <call_expr> strlen(<parm_decl> command_line) + <integer_cst> 1u), <integer_cst> 64ul, <integer_cst> 0ul)) [init/main.c:349]
  <call_expr> strcpy(<var_decl> saved_command_line, <addr_expr> <var_decl> &boot_command_line) [init/main.c:350]
  <call_expr> strcpy(<var_decl> static_command_line, <parm_decl> command_line) [init/main.c:351]

<function_decl> rest_init() [init/main.c:365]
  <decl_expr> int  <var_decl> pid
  <call_expr> rcu_scheduler_starting() [init/main.c:369]
  <call_expr> kernel_thread(<addr_expr> <function_decl> kernel_init, <pointer_type> <integer_cst> 0, <integer_cst> 2560ul) [init/main.c:375]
  <call_expr> numa_default_policy() [init/main.c:376]
  <modify_expr> (<var_decl> pid = 
    <call_expr> kernel_thread(<addr_expr> <function_decl> kthreadd, <pointer_type> <integer_cst> 0, <integer_cst> 1536ul)) [init/main.c:377]
  <call_expr> rcu_read_lock() [init/main.c:378]
  <modify_expr> (<var_decl> kthreadd_task = 
    <call_expr> find_task_by_pid_ns(<var_decl> pid, <addr_expr> <var_decl> &init_pid_ns)) [init/main.c:379]
  <call_expr> rcu_read_unlock() [init/main.c:380]
  <call_expr> complete(<addr_expr> <var_decl> &kthreadd_done) [init/main.c:381]
  <call_expr> init_idle_bootup_task(
    <call_expr> get_current()) [init/main.c:387]
  <call_expr> schedule_preempt_disabled() [init/main.c:388]
  <call_expr> cpu_startup_entry(<integer_cst> 1u) [init/main.c:390]

<function_decl> do_early_param(char * param, char * val, const char * unused) [init/main.c:394]
  <decl_expr> const struct obs_kernel_param* <var_decl> p
  <modify_expr> (<var_decl> p = <addr_expr> <var_decl> &__setup_start) [init/main.c:398]
  <goto_expr> goto <label_decl> <D.45302> [init/main.c:398]
  <label_expr> <label_decl> <D.45301> [init/main.c:409]
  <cond_expr> (
    if (
    <truth_orif_expr> (
      <truth_andif_expr> (
        <ne_expr> (<component_ref> <var_decl> p->early != <integer_cst> 0) && 
        <call_expr> parameq(<parm_decl> param, <component_ref> <var_decl> p->str) [init/main.c:399]) || 
      <truth_andif_expr> (
        <eq_expr> (
          <call_expr> strcmp(<parm_decl> param, <addr_expr> <string_cst> "console") == <integer_cst> 0) && 
        <eq_expr> (
          <call_expr> strcmp(<component_ref> <var_decl> p->str, <addr_expr> <string_cst> "earlycon") == <integer_cst> 0))))
    {
      <cond_expr> (
        if (
        <ne_expr> (
          <component_ref> <var_decl> p->setup_func(<parm_decl> val) != <integer_cst> 0))
        {
          <call_expr> printk(<addr_expr> <string_cst> "\14Malforme...", <parm_decl> param) [init/main.c:404]
        }
      ) [init/main.c:403]
    }
  ) [init/main.c:399]
  <postincrement_expr> (<var_decl> p++ )
  <label_expr> <label_decl> <D.45302> [init/main.c:409]
  <cond_expr> (
    if (
    <lt_expr> (<var_decl> p < <addr_expr> <var_decl> &__setup_end))
      <goto_expr> goto <label_decl> <D.45301> [init/main.c:409]
    else 
      <goto_expr> goto <label_decl> <D.45303> [init/main.c:409]
  ) [init/main.c:398]
  <label_expr> <label_decl> <D.45303> [init/main.c:409]
  <return_expr> (<integer_cst> 0) [init/main.c:408]

<function_decl> parse_early_options(char * cmdline) [init/main.c:411]
  <call_expr> parse_args(<addr_expr> <string_cst> "early opti...", <parm_decl> cmdline, <pointer_type> <integer_cst> 0, <integer_cst> 0u, <integer_cst> 0, <integer_cst> 0, <addr_expr> <function_decl> do_early_param) [init/main.c:413]

<function_decl> parse_early_param() [init/main.c:417]
  <decl_expr> static int  <var_decl> done = <integer_cst> 0
  <decl_expr> static char  <var_decl> tmp_cmdline[2048]
  <cond_expr> (
    if (
    <ne_expr> (<var_decl> done != <integer_cst> 0))
    {
      <return_expr> (<void>) [init/main.c:423]
    }
  ) [init/main.c:422]
  <call_expr> strlcpy(<addr_expr> <var_decl> &tmp_cmdline, <addr_expr> <var_decl> &boot_command_line, <integer_cst> 2048u) [init/main.c:426]
  <call_expr> parse_early_options(<addr_expr> <var_decl> &tmp_cmdline) [init/main.c:427]
  <modify_expr> (<var_decl> done = <integer_cst> 1) [init/main.c:428]

<function_decl> boot_cpu_init() [init/main.c:435]
  <decl_expr> int  <var_decl> cpu = 
    <target_expr> (<var_decl> <unnamed>, <integer_cst> 32u<integer_cst> 4u
      <decl_expr> int  <var_decl> pscr_ret__<pointer_type> <integer_cst> 0<integer_cst> 64u<integer_cst> 8u
      <decl_expr> const void * <var_decl> __vpp_verify = <pointer_type> <integer_cst> 0<var_decl> __vpp_verify
      <switch_expr> (
        switch (<integer_cst> 4ul) {
        case <integer_cst> 1ul:
        <modify_expr> (<var_decl> pscr_ret__ = 
          <target_expr> (<var_decl> <unnamed>, <integer_cst> 32u<integer_cst> 4u
            <decl_expr> int  <var_decl> pfo_ret__
            <switch_expr> (
              switch (<integer_cst> 4ul) {
              case <integer_cst> 1ul:<string_cst> "movb %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45321> [init/main.c:437]
              case <integer_cst> 2ul:<string_cst> "movw %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45321> [init/main.c:437]
              case <integer_cst> 4ul:<string_cst> "movl %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45321> [init/main.c:437]
              case <integer_cst> 8ul:<string_cst> "movq %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45321> [init/main.c:437]
              default:
              <call_expr> __bad_percpu_size() [init/main.c:437]
              }
            ) [init/main.c:437]
            <label_expr> <label_decl> <D.45321> [init/main.c:437]
            <modify_expr> (<var_decl> <unnamed> = <var_decl> pfo_ret__) [init/main.c:437]
          ) [init/main.c:437]) [init/main.c:437]
        <goto_expr> goto <label_decl> <D.45327> [init/main.c:437]
        case <integer_cst> 2ul:
        <modify_expr> (<var_decl> pscr_ret__ = 
          <target_expr> (<var_decl> <unnamed>, <integer_cst> 32u<integer_cst> 4u
            <decl_expr> int  <var_decl> pfo_ret__
            <switch_expr> (
              switch (<integer_cst> 4ul) {
              case <integer_cst> 1ul:<string_cst> "movb %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45331> [init/main.c:437]
              case <integer_cst> 2ul:<string_cst> "movw %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45331> [init/main.c:437]
              case <integer_cst> 4ul:<string_cst> "movl %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45331> [init/main.c:437]
              case <integer_cst> 8ul:<string_cst> "movq %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45331> [init/main.c:437]
              default:
              <call_expr> __bad_percpu_size() [init/main.c:437]
              }
            ) [init/main.c:437]
            <label_expr> <label_decl> <D.45331> [init/main.c:437]
            <modify_expr> (<var_decl> <unnamed> = <var_decl> pfo_ret__) [init/main.c:437]
          ) [init/main.c:437]) [init/main.c:437]
        <goto_expr> goto <label_decl> <D.45327> [init/main.c:437]
        case <integer_cst> 4ul:
        <modify_expr> (<var_decl> pscr_ret__ = 
          <target_expr> (<var_decl> <unnamed>, <integer_cst> 32u<integer_cst> 4u
            <decl_expr> int  <var_decl> pfo_ret__
            <switch_expr> (
              switch (<integer_cst> 4ul) {
              case <integer_cst> 1ul:<string_cst> "movb %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45340> [init/main.c:437]
              case <integer_cst> 2ul:<string_cst> "movw %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45340> [init/main.c:437]
              case <integer_cst> 4ul:<string_cst> "movl %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45340> [init/main.c:437]
              case <integer_cst> 8ul:<string_cst> "movq %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45340> [init/main.c:437]
              default:
              <call_expr> __bad_percpu_size() [init/main.c:437]
              }
            ) [init/main.c:437]
            <label_expr> <label_decl> <D.45340> [init/main.c:437]
            <modify_expr> (<var_decl> <unnamed> = <var_decl> pfo_ret__) [init/main.c:437]
          ) [init/main.c:437]) [init/main.c:437]
        <goto_expr> goto <label_decl> <D.45327> [init/main.c:437]
        case <integer_cst> 8ul:
        <modify_expr> (<var_decl> pscr_ret__ = 
          <target_expr> (<var_decl> <unnamed>, <integer_cst> 32u<integer_cst> 4u
            <decl_expr> int  <var_decl> pfo_ret__
            <switch_expr> (
              switch (<integer_cst> 4ul) {
              case <integer_cst> 1ul:<string_cst> "movb %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45349> [init/main.c:437]
              case <integer_cst> 2ul:<string_cst> "movw %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45349> [init/main.c:437]
              case <integer_cst> 4ul:<string_cst> "movl %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45349> [init/main.c:437]
              case <integer_cst> 8ul:<string_cst> "movq %%gs:..."<var_decl> pfo_ret__<var_decl> cpu_number
              <goto_expr> goto <label_decl> <D.45349> [init/main.c:437]
              default:
              <call_expr> __bad_percpu_size() [init/main.c:437]
              }
            ) [init/main.c:437]
            <label_expr> <label_decl> <D.45349> [init/main.c:437]
            <modify_expr> (<var_decl> <unnamed> = <var_decl> pfo_ret__) [init/main.c:437]
          ) [init/main.c:437]) [init/main.c:437]
        <goto_expr> goto <label_decl> <D.45327> [init/main.c:437]
        default:
        <call_expr> __bad_size_call_parameter() [init/main.c:437]
        <goto_expr> goto <label_decl> <D.45327> [init/main.c:437]
        }
      ) [init/main.c:437]
      <label_expr> <label_decl> <D.45327> [init/main.c:437]
      <modify_expr> (<var_decl> <unnamed> = <var_decl> pscr_ret__) [init/main.c:437]
    ) [init/main.c:437]
  <call_expr> set_cpu_online(<var_decl> cpu, <integer_cst> 1) [init/main.c:439]
  <call_expr> set_cpu_active(<var_decl> cpu, <integer_cst> 1) [init/main.c:440]
  <call_expr> set_cpu_present(<var_decl> cpu, <integer_cst> 1) [init/main.c:441]
  <call_expr> set_cpu_possible(<var_decl> cpu, <integer_cst> 1) [init/main.c:442]

<function_decl> smp_setup_processor_id() [init/main.c:445]

<function_decl> thread_info_cache_init() [init/main.c:450]

<function_decl> mm_init() [init/main.c:458]
  <call_expr> page_cgroup_init_flatmem() [init/main.c:464]
  <call_expr> mem_init() [init/main.c:465]
  <call_expr> kmem_cache_init() [init/main.c:466]
  <call_expr> percpu_init_late() [init/main.c:467]
  <call_expr> vmalloc_init() [init/main.c:469]

<function_decl> start_kernel() [init/main.c:472]
  <decl_expr> char * <var_decl> command_line
  <call_expr> lockdep_init() [init/main.c:481]
  <call_expr> smp_setup_processor_id() [init/main.c:482]
  <call_expr> debug_objects_early_init() [init/main.c:483]
  <call_expr> boot_init_stack_canary() [init/main.c:488]
  <call_expr> cgroup_init_early() [init/main.c:490]
  <call_expr> arch_local_irq_disable() [init/main.c:492]
  <call_expr> trace_hardirqs_off() [init/main.c:492]
  <modify_expr> (<var_decl> early_boot_irqs_disabled = <integer_cst> 1u) [init/main.c:493]
  <call_expr> boot_cpu_init() [init/main.c:499]
  <call_expr> printk(<addr_expr> <string_cst> "\15%s", <addr_expr> <var_decl> &linux_banner) [init/main.c:501]
  <call_expr> setup_arch(<addr_expr> <var_decl> &command_line) [init/main.c:502]
  <call_expr> mm_init_owner(<addr_expr> <var_decl> &init_mm, <addr_expr> <var_decl> &init_task) [init/main.c:503]
  <call_expr> mm_init_cpumask(<addr_expr> <var_decl> &init_mm) [init/main.c:504]
  <call_expr> setup_command_line(<var_decl> command_line) [init/main.c:505]
  <call_expr> setup_nr_cpu_ids() [init/main.c:506]
  <call_expr> setup_per_cpu_areas() [init/main.c:507]
  <call_expr> smp_prepare_boot_cpu() [init/main.c:508]
  <call_expr> build_all_zonelists(<pointer_type> <integer_cst> 0, <pointer_type> <integer_cst> 0) [init/main.c:510]
  <call_expr> page_alloc_init() [init/main.c:511]
  <call_expr> printk(<addr_expr> <string_cst> "\15Kernel c...", <addr_expr> <var_decl> &boot_command_line) [init/main.c:513]
  <call_expr> parse_early_param() [init/main.c:514]
  <call_expr> parse_args(<addr_expr> <string_cst> "Booting ke...", <var_decl> static_command_line, <addr_expr> <var_decl> &__start___param, 
    <exact_div_expr> ((
      <minus_expr> (<addr_expr> <var_decl> &__stop___param - <addr_expr> <var_decl> &__start___param)) /[ex] <integer_cst> 32l), <integer_cst> -1, <integer_cst> -1, <addr_expr> <function_decl> unknown_bootoption) [init/main.c:515]
  <call_expr> jump_label_init() [init/main.c:519]
  <call_expr> setup_log_buf(<integer_cst> 0) [init/main.c:525]
  <call_expr> pidhash_init() [init/main.c:526]
  <call_expr> vfs_caches_init_early() [init/main.c:527]
  <call_expr> sort_main_extable() [init/main.c:528]
  <call_expr> trap_init() [init/main.c:529]
  <call_expr> mm_init() [init/main.c:530]
  <call_expr> sched_init() [init/main.c:537]
  <modify_expr> (<component_ref> 
      <call_expr> current_thread_info()->preempt_count = 
    <plus_expr> (<component_ref> 
        <call_expr> current_thread_info()->preempt_count + <integer_cst> 1)) [init/main.c:542]<string_cst> ""<string_cst> "memory"
  <cond_expr> (
    if (
    <ne_expr> (
      <target_expr> (<var_decl> <unnamed>, 
        <eq_expr> (
          <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
            <decl_expr> long unsigned int  <var_decl> _flags
            <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
              <decl_expr> long unsigned int  <var_decl> __dummy
              <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
              <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:543]
            ) [init/main.c:543]
            <modify_expr> (<var_decl> _flags = 
              <call_expr> arch_local_save_flags()) [init/main.c:543]
            <modify_expr> (<var_decl> <unnamed> = 
              <target_expr> (<var_decl> <unnamed>, 
                <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
                  <decl_expr> long unsigned int  <var_decl> __dummy
                  <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
                  <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:543]
                ) [init/main.c:543]
                <modify_expr> (<var_decl> <unnamed> = 
                  <call_expr> arch_irqs_disabled_flags(<var_decl> _flags)) [init/main.c:543]
              ) [init/main.c:543]) [init/main.c:543]
          ) [init/main.c:543] == <integer_cst> 0)<integer_cst> 32u<integer_cst> 4u
        <decl_expr> int  <var_decl> __ret_warn_on = 
          <eq_expr> (
            <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
              <decl_expr> long unsigned int  <var_decl> _flags
              <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
                <decl_expr> long unsigned int  <var_decl> __dummy
                <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
                <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:543]
              ) [init/main.c:543]
              <modify_expr> (<var_decl> _flags = 
                <call_expr> arch_local_save_flags()) [init/main.c:543]
              <modify_expr> (<var_decl> <unnamed> = 
                <target_expr> (<var_decl> <unnamed>, 
                  <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
                    <decl_expr> long unsigned int  <var_decl> __dummy
                    <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
                    <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:543]
                  ) [init/main.c:543]
                  <modify_expr> (<var_decl> <unnamed> = 
                    <call_expr> arch_irqs_disabled_flags(<var_decl> _flags)) [init/main.c:543]
                ) [init/main.c:543]) [init/main.c:543]
            ) [init/main.c:543] == <integer_cst> 0)
        <cond_expr> (
          if (
          <ne_expr> (
            <call_expr> __builtin_expect(
              <ne_expr> (<var_decl> __ret_warn_on != <integer_cst> 0), <integer_cst> 0l) != <integer_cst> 0l))
          {
            <call_expr> warn_slowpath_fmt(<addr_expr> <string_cst> "init/main....", <integer_cst> 543, <addr_expr> <string_cst> "Interrupts...") [init/main.c:543]
          }
        ) [init/main.c:543]
        <modify_expr> (<var_decl> <unnamed> = 
          <call_expr> __builtin_expect(
            <ne_expr> (<var_decl> __ret_warn_on != <integer_cst> 0), <integer_cst> 0l)) [init/main.c:543]
      ) [init/main.c:543] != <integer_cst> 0l))
    {
      <call_expr> arch_local_irq_disable() [init/main.c:544]
      <call_expr> trace_hardirqs_off() [init/main.c:544]
    }
  ) [init/main.c:543]
  <call_expr> idr_init_cache() [init/main.c:545]
  <call_expr> rcu_init() [init/main.c:546]
  <call_expr> tick_nohz_init() [init/main.c:547]
  <call_expr> radix_tree_init() [init/main.c:548]
  <call_expr> early_irq_init() [init/main.c:550]
  <call_expr> init_IRQ() [init/main.c:551]
  <call_expr> tick_init() [init/main.c:552]
  <call_expr> init_timers() [init/main.c:553]
  <call_expr> hrtimers_init() [init/main.c:554]
  <call_expr> softirq_init() [init/main.c:555]
  <call_expr> timekeeping_init() [init/main.c:556]
  <call_expr> time_init() [init/main.c:557]
  <call_expr> sched_clock_postinit() [init/main.c:558]
  <call_expr> perf_event_init() [init/main.c:559]
  <call_expr> profile_init() [init/main.c:560]
  <call_expr> call_function_init() [init/main.c:561]
  <target_expr> (<var_decl> <unnamed>, 
    <eq_expr> (
      <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
        <decl_expr> long unsigned int  <var_decl> _flags
        <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
          <decl_expr> long unsigned int  <var_decl> __dummy
          <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
          <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:562]
        ) [init/main.c:562]
        <modify_expr> (<var_decl> _flags = 
          <call_expr> arch_local_save_flags()) [init/main.c:562]
        <modify_expr> (<var_decl> <unnamed> = 
          <target_expr> (<var_decl> <unnamed>, 
            <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
              <decl_expr> long unsigned int  <var_decl> __dummy
              <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
              <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:562]
            ) [init/main.c:562]
            <modify_expr> (<var_decl> <unnamed> = 
              <call_expr> arch_irqs_disabled_flags(<var_decl> _flags)) [init/main.c:562]
          ) [init/main.c:562]) [init/main.c:562]
      ) [init/main.c:562] == <integer_cst> 0)<integer_cst> 32u<integer_cst> 4u
    <decl_expr> int  <var_decl> __ret_warn_on = 
      <eq_expr> (
        <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
          <decl_expr> long unsigned int  <var_decl> _flags
          <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
            <decl_expr> long unsigned int  <var_decl> __dummy
            <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
            <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:562]
          ) [init/main.c:562]
          <modify_expr> (<var_decl> _flags = 
            <call_expr> arch_local_save_flags()) [init/main.c:562]
          <modify_expr> (<var_decl> <unnamed> = 
            <target_expr> (<var_decl> <unnamed>, 
              <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
                <decl_expr> long unsigned int  <var_decl> __dummy
                <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
                <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:562]
              ) [init/main.c:562]
              <modify_expr> (<var_decl> <unnamed> = 
                <call_expr> arch_irqs_disabled_flags(<var_decl> _flags)) [init/main.c:562]
            ) [init/main.c:562]) [init/main.c:562]
        ) [init/main.c:562] == <integer_cst> 0)
    <cond_expr> (
      if (
      <ne_expr> (
        <call_expr> __builtin_expect(
          <ne_expr> (<var_decl> __ret_warn_on != <integer_cst> 0), <integer_cst> 0l) != <integer_cst> 0l))
      {
        <call_expr> warn_slowpath_fmt(<addr_expr> <string_cst> "init/main....", <integer_cst> 562, <addr_expr> <string_cst> "Interrupts...") [init/main.c:562]
      }
    ) [init/main.c:562]
    <modify_expr> (<var_decl> <unnamed> = 
      <call_expr> __builtin_expect(
        <ne_expr> (<var_decl> __ret_warn_on != <integer_cst> 0), <integer_cst> 0l)) [init/main.c:562]
  ) [init/main.c:562]
  <modify_expr> (<var_decl> early_boot_irqs_disabled = <integer_cst> 0u) [init/main.c:563]
  <call_expr> trace_hardirqs_on() [init/main.c:564]
  <call_expr> arch_local_irq_enable() [init/main.c:564]
  <call_expr> kmem_cache_init_late() [init/main.c:566]
  <call_expr> console_init() [init/main.c:573]
  <cond_expr> (
    if (
    <ne_expr> (<var_decl> panic_later != <pointer_type> <integer_cst> 0))
    {
      <call_expr> panic(<var_decl> panic_later, <var_decl> panic_param) [init/main.c:575]
    }
  ) [init/main.c:574]
  <call_expr> lockdep_info() [init/main.c:577]
  <call_expr> locking_selftest() [init/main.c:584]
  <cond_expr> (
    if (
    <truth_andif_expr> ((
      <truth_andif_expr> (
        <ne_expr> (<var_decl> initrd_start != <integer_cst> 0ul) && 
        <eq_expr> (<var_decl> initrd_below_start_ok == <integer_cst> 0))) && 
      <lt_expr> (
        <exact_div_expr> ((
          <plus_expr> (
            <pointer_plus_expr> (<pointer_type> <integer_cst> -24189255811072 + 
              <mult_expr> ((
                <rshift_expr> (
                  <call_expr> __phys_addr(<var_decl> initrd_start) >> <integer_cst> 12)) * <integer_cst> 64ul)) + <integer_cst> 24189255811072l)) /[ex] <integer_cst> 64l) < <var_decl> min_low_pfn)))
    {
      <call_expr> printk(<addr_expr> <string_cst> "\12initrd o...", 
        <exact_div_expr> ((
          <plus_expr> (
            <pointer_plus_expr> (<pointer_type> <integer_cst> -24189255811072 + 
              <mult_expr> ((
                <rshift_expr> (
                  <call_expr> __phys_addr(<var_decl> initrd_start) >> <integer_cst> 12)) * <integer_cst> 64ul)) + <integer_cst> 24189255811072l)) /[ex] <integer_cst> 64l), <var_decl> min_low_pfn) [init/main.c:589]
      <modify_expr> (<var_decl> initrd_start = <integer_cst> 0ul) [init/main.c:592]
    }
  ) [init/main.c:587]
  <call_expr> page_cgroup_init() [init/main.c:595]
  <call_expr> debug_objects_mem_init() [init/main.c:596]
  <call_expr> kmemleak_init() [init/main.c:597]
  <call_expr> setup_per_cpu_pageset() [init/main.c:598]
  <call_expr> numa_policy_init() [init/main.c:599]
  <cond_expr> (
    if (
    <ne_expr> (<var_decl> late_time_init != <pointer_type> <integer_cst> 0))
    {
       [init/main.c:601]
    }
  ) [init/main.c:600]
  <call_expr> sched_clock_init() [init/main.c:602]
  <call_expr> calibrate_delay() [init/main.c:603]
  <call_expr> pidmap_init() [init/main.c:604]
  <call_expr> anon_vma_init() [init/main.c:605]
  <cond_expr> (
    if (
    <ne_expr> (
      <call_expr> efi_enabled(<integer_cst> 3) != <integer_cst> 0))
    {
      <call_expr> efi_enter_virtual_mode() [init/main.c:608]
    }
  ) [init/main.c:607]
  <call_expr> thread_info_cache_init() [init/main.c:610]
  <call_expr> cred_init() [init/main.c:611]
  <call_expr> fork_init(<var_decl> totalram_pages) [init/main.c:612]
  <call_expr> proc_caches_init() [init/main.c:613]
  <call_expr> buffer_init() [init/main.c:614]
  <call_expr> key_init() [init/main.c:615]
  <call_expr> security_init() [init/main.c:616]
  <call_expr> dbg_late_init() [init/main.c:617]
  <call_expr> vfs_caches_init(<var_decl> totalram_pages) [init/main.c:618]
  <call_expr> signals_init() [init/main.c:619]
  <call_expr> page_writeback_init() [init/main.c:621]
  <call_expr> proc_root_init() [init/main.c:623]
  <call_expr> cgroup_init() [init/main.c:625]
  <call_expr> cpuset_init() [init/main.c:626]
  <call_expr> taskstats_init_early() [init/main.c:627]
  <call_expr> delayacct_init() [init/main.c:628]
  <call_expr> check_bugs() [init/main.c:630]
  <call_expr> acpi_early_init() [init/main.c:632]
  <call_expr> sfi_init_late() [init/main.c:633]
  <cond_expr> (
    if (
    <ne_expr> (
      <call_expr> efi_enabled(<integer_cst> 3) != <integer_cst> 0))
    {
      <call_expr> efi_late_init() [init/main.c:636]
      <call_expr> efi_free_boot_services() [init/main.c:637]
    }
  ) [init/main.c:635]
  <call_expr> ftrace_init() [init/main.c:640]
  <call_expr> rest_init() [init/main.c:643]

<function_decl> do_ctors() [init/main.c:647]
  <decl_expr> void (*ctor_fn_t)(null)* <var_decl> fn = <addr_expr> <var_decl> &__ctors_start
  <goto_expr> goto <label_decl> <D.45401> [init/main.c:652]
  <label_expr> <label_decl> <D.45400> [init/main.c:655]
   [init/main.c:653]
  <postincrement_expr> (<var_decl> fn++ )
  <label_expr> <label_decl> <D.45401> [init/main.c:655]
  <cond_expr> (
    if (
    <lt_expr> (<var_decl> fn < <addr_expr> <var_decl> &__ctors_end))
      <goto_expr> goto <label_decl> <D.45400> [init/main.c:655]
    else 
      <goto_expr> goto <label_decl> <D.45402> [init/main.c:655]
  ) [init/main.c:652]
  <label_expr> <label_decl> <D.45402> [init/main.c:655]

<function_decl> __check_initcall_debug() [init/main.c:658]
  <return_expr> (<addr_expr> <var_decl> &initcall_debug) [init/main.c:658]

<function_decl> do_one_initcall_debug(int (*initcall_t)(null) fn) [init/main.c:660]
  <decl_expr> static const char  <var_decl> __func__[22] = <string_cst> "do_one_ini..."
  <decl_expr> uninon ktime_t <var_decl> calltime
  <decl_expr> uninon ktime_t <var_decl> delta
  <decl_expr> uninon ktime_t <var_decl> rettime
  <decl_expr> long long unsigned int  <var_decl> duration
  <decl_expr> int  <var_decl> ret<addr_expr> <string_cst> "main"<addr_expr> <var_decl> &__func__<addr_expr> <string_cst> "init/main...."<addr_expr> <string_cst> "calling  %..."<integer_cst> 666u<integer_cst> 1u<integer_cst> 320u<integer_cst> 40u
  <decl_expr> static struct _ddebug <var_decl> descriptor = <addr_expr> <string_cst> "main"<addr_expr> <var_decl> &__func__<addr_expr> <string_cst> "init/main...."<addr_expr> <string_cst> "calling  %..."<integer_cst> 666u<integer_cst> 1u
  <cond_expr> (
    if (
    <ne_expr> (
      <call_expr> __builtin_expect(
        <ne_expr> ((
          <bit_and_expr> (<component_ref> <var_decl> descriptor.flags & <integer_cst> 1)) != <integer_cst> 0), <integer_cst> 0l) != <integer_cst> 0l))
    {
      <call_expr> __dynamic_pr_debug(<addr_expr> <var_decl> &descriptor, <addr_expr> <string_cst> "calling  %...", <parm_decl> fn, 
        <call_expr> task_pid_nr(
          <call_expr> get_current())) [init/main.c:666]
    }
  ) [init/main.c:666]
  <modify_expr> (<var_decl> calltime = 
    <call_expr> ktime_get()) [init/main.c:667]
  <modify_expr> (<var_decl> ret = 
    ) [init/main.c:668]
  <modify_expr> (<var_decl> rettime = 
    <call_expr> ktime_get()) [init/main.c:669]
  <modify_expr> (<var_decl> delta = 
    <decl_expr> uninon ktime_t <var_decl> <unnamed> = 
      <minus_expr> (<component_ref> <var_decl> rettime.tv64 - <component_ref> <var_decl> calltime.tv64)) [init/main.c:670]
  <modify_expr> (<var_decl> duration = 
    <rshift_expr> (<component_ref> <var_decl> delta.tv64 >> <integer_cst> 10)) [init/main.c:671]<addr_expr> <string_cst> "main"<addr_expr> <var_decl> &__func__<addr_expr> <string_cst> "init/main...."<addr_expr> <string_cst> "initcall %..."<integer_cst> 673u<integer_cst> 1u<integer_cst> 320u<integer_cst> 40u
  <decl_expr> static struct _ddebug <var_decl> descriptor = <addr_expr> <string_cst> "main"<addr_expr> <var_decl> &__func__<addr_expr> <string_cst> "init/main...."<addr_expr> <string_cst> "initcall %..."<integer_cst> 673u<integer_cst> 1u
  <cond_expr> (
    if (
    <ne_expr> (
      <call_expr> __builtin_expect(
        <ne_expr> ((
          <bit_and_expr> (<component_ref> <var_decl> descriptor.flags & <integer_cst> 1)) != <integer_cst> 0), <integer_cst> 0l) != <integer_cst> 0l))
    {
      <call_expr> __dynamic_pr_debug(<addr_expr> <var_decl> &descriptor, <addr_expr> <string_cst> "initcall %...", <parm_decl> fn, <var_decl> ret, <var_decl> duration) [init/main.c:672]
    }
  ) [init/main.c:672]
  <return_expr> (<var_decl> ret) [init/main.c:675]

<function_decl> do_one_initcall(int (*initcall_t)(null) fn) [init/main.c:678]
  <decl_expr> int  <var_decl> count = <component_ref> 
      <call_expr> current_thread_info() [init/main.c:680]->preempt_count
  <decl_expr> int  <var_decl> ret
  <decl_expr> char  <var_decl> msgbuf[64]
  <cond_expr> (
    if (<var_decl> initcall_debug)
    {
      <modify_expr> (<var_decl> ret = 
        <call_expr> do_one_initcall_debug(<parm_decl> fn)) [init/main.c:685]
    }
    else {
      <modify_expr> (<var_decl> ret = 
        ) [init/main.c:687]
    }
  ) [init/main.c:684]
  <modify_expr> (<array_ref> <var_decl> msgbuf[<integer_cst> 0] = <integer_cst> 0) [init/main.c:689]
  <cond_expr> (
    if (
    <ne_expr> (<component_ref> 
        <call_expr> current_thread_info()->preempt_count != <var_decl> count))
    {
      <call_expr> __builtin_strcpy(<addr_expr> <var_decl> &msgbuf, <addr_expr> <string_cst> "preemption...") [init/main.c:692]<integer_cst> 21
      <modify_expr> (<component_ref> 
          <call_expr> current_thread_info()->preempt_count = <var_decl> count) [init/main.c:693]
    }
  ) [init/main.c:691]
  <cond_expr> (
    if (
    <ne_expr> (
      <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
        <decl_expr> long unsigned int  <var_decl> _flags
        <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
          <decl_expr> long unsigned int  <var_decl> __dummy
          <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
          <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:695]
        ) [init/main.c:695]
        <modify_expr> (<var_decl> _flags = 
          <call_expr> arch_local_save_flags()) [init/main.c:695]
        <modify_expr> (<var_decl> <unnamed> = 
          <target_expr> (<var_decl> <unnamed>, 
            <target_expr> (<var_decl> <unnamed>, <integer_cst> 64u<integer_cst> 8u
              <decl_expr> long unsigned int  <var_decl> __dummy
              <decl_expr> long unsigned int  <var_decl> __dummy2<integer_cst> 0
              <modify_expr> (<var_decl> <unnamed> = <integer_cst> 1) [init/main.c:695]
            ) [init/main.c:695]
            <modify_expr> (<var_decl> <unnamed> = 
              <call_expr> arch_irqs_disabled_flags(<var_decl> _flags)) [init/main.c:695]
          ) [init/main.c:695]) [init/main.c:695]
      ) [init/main.c:695] != <integer_cst> 0))
    {
      <call_expr> strlcat(<addr_expr> <var_decl> &msgbuf, <addr_expr> <string_cst> "disabled i...", <integer_cst> 64ul) [init/main.c:696]
      <call_expr> trace_hardirqs_on() [init/main.c:697]
      <call_expr> arch_local_irq_enable() [init/main.c:697]
    }
  ) [init/main.c:695]
  <target_expr> (<var_decl> <unnamed>, 
    <ne_expr> (<array_ref> <var_decl> msgbuf[<integer_cst> 0] != <integer_cst> 0)<integer_cst> 32u<integer_cst> 4u
    <decl_expr> int  <var_decl> __ret_warn_on = 
      <ne_expr> (<array_ref> <var_decl> msgbuf[<integer_cst> 0] != <integer_cst> 0)
    <cond_expr> (
      if (
      <ne_expr> (
        <call_expr> __builtin_expect(
          <ne_expr> (<var_decl> __ret_warn_on != <integer_cst> 0), <integer_cst> 0l) != <integer_cst> 0l))
      {
        <call_expr> warn_slowpath_fmt(<addr_expr> <string_cst> "init/main....", <integer_cst> 699, <addr_expr> <string_cst> "initcall %...", <parm_decl> fn, <addr_expr> <var_decl> &msgbuf) [init/main.c:699]
      }
    ) [init/main.c:699]
    <modify_expr> (<var_decl> <unnamed> = 
      <call_expr> __builtin_expect(
        <ne_expr> (<var_decl> __ret_warn_on != <integer_cst> 0), <integer_cst> 0l)) [init/main.c:699]
  ) [init/main.c:699]
  <return_expr> (<var_decl> ret) [init/main.c:701]

<function_decl> do_initcall_level(int  level) [init/main.c:740]
  <decl_expr> int (*initcall_t)(null)* <var_decl> fn
  <call_expr> strcpy(<var_decl> static_command_line, <var_decl> saved_command_line) [init/main.c:745]
  <call_expr> parse_args(<array_ref> <var_decl> initcall_level_names[<parm_decl> level], <var_decl> static_command_line, <addr_expr> <var_decl> &__start___param, 
    <exact_div_expr> ((
      <minus_expr> (<addr_expr> <var_decl> &__stop___param - <addr_expr> <var_decl> &__start___param)) /[ex] <integer_cst> 32l), <parm_decl> level, <parm_decl> level, <addr_expr> <function_decl> repair_env_string) [init/main.c:746]
  <modify_expr> (<var_decl> fn = <array_ref> <var_decl> initcall_levels[<parm_decl> level]) [init/main.c:752]
  <goto_expr> goto <label_decl> <D.45464> [init/main.c:752]
  <label_expr> <label_decl> <D.45463> [init/main.c:754]
  <call_expr> do_one_initcall(
    <indirect_ref> (<var_decl> *fn)) [init/main.c:753]
  <postincrement_expr> (<var_decl> fn++ )
  <label_expr> <label_decl> <D.45464> [init/main.c:754]
  <cond_expr> (
    if (
    <lt_expr> (<var_decl> fn < <array_ref> <var_decl> initcall_levels[
        <plus_expr> (<parm_decl> level + <integer_cst> 1)]))
      <goto_expr> goto <label_decl> <D.45463> [init/main.c:754]
    else 
      <goto_expr> goto <label_decl> <D.45465> [init/main.c:754]
  ) [init/main.c:752]
  <label_expr> <label_decl> <D.45465> [init/main.c:754]

<function_decl> do_initcalls() [init/main.c:756]
  <decl_expr> int  <var_decl> level
  <modify_expr> (<var_decl> level = <integer_cst> 0) [init/main.c:760]
  <goto_expr> goto <label_decl> <D.45476> [init/main.c:760]
  <label_expr> <label_decl> <D.45475> [init/main.c:762]
  <call_expr> do_initcall_level(<var_decl> level) [init/main.c:761]
  <postincrement_expr> (<var_decl> level++ )
  <label_expr> <label_decl> <D.45476> [init/main.c:762]
  <cond_expr> (
    if (
    <le_expr> (<var_decl> level <= <integer_cst> 7u))
      <goto_expr> goto <label_decl> <D.45475> [init/main.c:762]
    else 
      <goto_expr> goto <label_decl> <D.45477> [init/main.c:762]
  ) [init/main.c:760]
  <label_expr> <label_decl> <D.45477> [init/main.c:762]

<function_decl> do_basic_setup() [init/main.c:771]
  <call_expr> cpuset_init_smp() [init/main.c:773]
  <call_expr> usermodehelper_init() [init/main.c:774]
  <call_expr> shmem_init() [init/main.c:775]
  <call_expr> driver_init() [init/main.c:776]
  <call_expr> init_irq_proc() [init/main.c:777]
  <call_expr> do_ctors() [init/main.c:778]
  <call_expr> usermodehelper_enable() [init/main.c:779]
  <call_expr> do_initcalls() [init/main.c:780]

<function_decl> do_pre_smp_initcalls() [init/main.c:783]
  <decl_expr> int (*initcall_t)(null)* <var_decl> fn
  <modify_expr> (<var_decl> fn = <addr_expr> <var_decl> &__initcall_start) [init/main.c:787]
  <goto_expr> goto <label_decl> <D.45486> [init/main.c:787]
  <label_expr> <label_decl> <D.45485> [init/main.c:789]
  <call_expr> do_one_initcall(
    <indirect_ref> (<var_decl> *fn)) [init/main.c:788]
  <postincrement_expr> (<var_decl> fn++ )
  <label_expr> <label_decl> <D.45486> [init/main.c:789]
  <cond_expr> (
    if (
    <lt_expr> (<var_decl> fn < <addr_expr> <var_decl> &__initcall0_start))
      <goto_expr> goto <label_decl> <D.45485> [init/main.c:789]
    else 
      <goto_expr> goto <label_decl> <D.45487> [init/main.c:789]
  ) [init/main.c:787]
  <label_expr> <label_decl> <D.45487> [init/main.c:789]

<function_decl> load_default_modules() [init/main.c:797]
  <call_expr> load_default_elevator_module() [init/main.c:799]

<function_decl> run_init_process(const char * init_filename) [init/main.c:802]
  <modify_expr> (<array_ref> <var_decl> argv_init[<integer_cst> 0] = <parm_decl> init_filename) [init/main.c:804]
  <return_expr> (
    <call_expr> do_execve(<parm_decl> init_filename, <addr_expr> <var_decl> &argv_init, <addr_expr> <var_decl> &envp_init)) [init/main.c:805]

<function_decl> kernel_init(void * unused) [init/main.c:812]
  <call_expr> kernel_init_freeable() [init/main.c:814]
  <call_expr> async_synchronize_full() [init/main.c:816]
  <call_expr> free_initmem() [init/main.c:817]
  <call_expr> mark_rodata_ro() [init/main.c:818]
  <modify_expr> (<var_decl> system_state = <integer_cst> 1u) [init/main.c:819]
  <call_expr> numa_default_policy() [init/main.c:820]
  <call_expr> flush_delayed_fput() [init/main.c:822]
  <cond_expr> (
    if (
    <ne_expr> (<var_decl> ramdisk_execute_command != <pointer_type> <integer_cst> 0))
    {
      <cond_expr> (
        if (
        <eq_expr> (
          <call_expr> run_init_process(<var_decl> ramdisk_execute_command) == <integer_cst> 0))
        {
          <return_expr> (<integer_cst> 0) [init/main.c:826]
        }
      ) [init/main.c:825]
      <call_expr> printk(<addr_expr> <string_cst> "\13Failed t...", <var_decl> ramdisk_execute_command) [init/main.c:827]
    }
  ) [init/main.c:824]
  <cond_expr> (
    if (
    <ne_expr> (<var_decl> execute_command != <pointer_type> <integer_cst> 0))
    {
      <cond_expr> (
        if (
        <eq_expr> (
          <call_expr> run_init_process(<var_decl> execute_command) == <integer_cst> 0))
        {
          <return_expr> (<integer_cst> 0) [init/main.c:838]
        }
      ) [init/main.c:837]
      <call_expr> printk(<addr_expr> <string_cst> "\13Failed t...", <var_decl> execute_command) [init/main.c:839]
    }
  ) [init/main.c:836]
  <cond_expr> (
    if (
    <truth_orif_expr> ((
      <truth_orif_expr> ((
        <truth_orif_expr> (
          <eq_expr> (
            <call_expr> run_init_process(<addr_expr> <string_cst> "/sbin/init...") == <integer_cst> 0) || 
          <eq_expr> (
            <call_expr> run_init_process(<addr_expr> <string_cst> "/etc/init") == <integer_cst> 0))) || 
        <eq_expr> (
          <call_expr> run_init_process(<addr_expr> <string_cst> "/bin/init") == <integer_cst> 0))) || 
      <eq_expr> (
        <call_expr> run_init_process(<addr_expr> <string_cst> "/bin/sh") == <integer_cst> 0)))
    {
      <return_expr> (<integer_cst> 0) [init/main.c:846]
    }
  ) [init/main.c:842]
  <call_expr> panic(<addr_expr> <string_cst> "No init fo...") [init/main.c:848]

<function_decl> kernel_init_freeable() [init/main.c:852]
  <call_expr> wait_for_completion(<addr_expr> <var_decl> &kthreadd_done) [init/main.c:857]
  <modify_expr> (<var_decl> gfp_allowed_mask = <integer_cst> 33554431u) [init/main.c:860]
  <call_expr> set_mems_allowed(<array_ref> <var_decl> node_states[<integer_cst> 3]) [init/main.c:865]
  <call_expr> set_cpus_allowed_ptr(
    <call_expr> get_current(), <addr_expr> <var_decl> &cpu_all_bits) [init/main.c:869]
  <modify_expr> (<var_decl> cad_pid = 
    <call_expr> task_pid(
      <call_expr> get_current())) [init/main.c:871]
  <call_expr> smp_prepare_cpus(<var_decl> setup_max_cpus) [init/main.c:873]
  <call_expr> do_pre_smp_initcalls() [init/main.c:875]
  <call_expr> lockup_detector_init() [init/main.c:876]
  <call_expr> smp_init() [init/main.c:878]
  <call_expr> sched_init_smp() [init/main.c:879]
  <call_expr> do_basic_setup() [init/main.c:881]
  <cond_expr> (
    if (
    <lt_expr> (
      <call_expr> sys_open(<addr_expr> <string_cst> "/dev/conso...", <integer_cst> 2, <integer_cst> 0) < <integer_cst> 0l))
    {
      <call_expr> printk(<addr_expr> <string_cst> "\13Warning:...") [init/main.c:885]
    }
  ) [init/main.c:884]
  <call_expr> sys_dup(<integer_cst> 0u) [init/main.c:887]
  <call_expr> sys_dup(<integer_cst> 0u) [init/main.c:888]
  <cond_expr> (
    if (
    <eq_expr> (<var_decl> ramdisk_execute_command == <pointer_type> <integer_cst> 0))
    {
      <modify_expr> (<var_decl> ramdisk_execute_command = <addr_expr> <string_cst> "/init") [init/main.c:895]
    }
  ) [init/main.c:894]
  <cond_expr> (
    if (
    <ne_expr> (
      <call_expr> sys_access(<var_decl> ramdisk_execute_command, <integer_cst> 0) != <integer_cst> 0l))
    {
      <modify_expr> (<var_decl> ramdisk_execute_command = <pointer_type> <integer_cst> 0) [init/main.c:898]
      <call_expr> prepare_namespace() [init/main.c:899]
    }
  ) [init/main.c:897]
  <call_expr> load_default_modules() [init/main.c:909]
